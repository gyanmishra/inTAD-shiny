getwd()
q()
q()
org=data.frame(row.names = c('Mus musculus','Rattus norvegicus','Homo sapiens'))
#org$code=c('mmu','rno','hsa')
org$db=c("org.Mm.eg.db","org.Rn.eg.db","org.Hs.eg.db")
org=as.matrix(org)
org
setwd("/Users/venu/Desktop/work/pipelines/inTAD/inTAD-shiny")
shiny::runApp()
library(shiny)
library(shinycssloaders)
hs=data.frame(row.names = c('Homo sapiens'))
hs$code=c('hsa')
hs$db=c("org.Hs.eg.db")
hs=as.matrix(org)
# UI
ui <- shinyUI(fluidPage(
# Title
titlePanel("inTAD"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
p('Prepare 2 input files'),
p('1. H3K27ac ChIP-seq peaks with RPKM normalized signal'),
p('2. Gencode RNA-seq log2(RPKM)'),
selectInput("org", "Organism:",
choices=row.names(hs)),
# ChIP-seq signals upload
fileInput('file1', 'H3K27ac ChIP-seq signals file',
accept = c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)
),
# chip-seq bed file
fileInput('file2', 'H3K27ac ChIP-seq bed file',
accept=c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)),
# RNA-seq file
fileInput('file3', 'RNA-seq file',
accept = c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)
),
p('Select correlation cut-off'),
numericInput('corValue', 'Correlation value', 0.6, min=0, max=1, step=0.1),
p('Select p-value cut-off'),
numericInput('pVal', 'P-Value cut-off', 0.05, min = 0, max=1, step=0.01),
actionButton("analysis", "Perform Analysis")
),
# Show some sample results
mainPanel(
withSpinner(plotOutput("distPlot",height = '700px')),
p(),
verbatimTextOutput("pv"),
h4("Top 10 highly correlated and significant Enhancer - gene associations"),
column(12,withSpinner(dataTableOutput('tablecorr'),proxy.height = '80px')),
column(12,dataTableOutput('table'))
)
)))
server <- function(input, output){
}
# Run shiny app
shinyApp(ui = ui, server = server)
runApp()
runApp()
runApp()
runApp()
runApp('table_test.R')
library(shiny)
library(shinycssloaders)
ui=shinyUI(basicPage(
h2("mtcars data"),
dataTableOutput('myTable')
))
server=function(input,output){
output$mytable=renderDataTable({
mtcars
})
}
shinyApp(ui=ui, server=server)
runApp('table_test.R')
runApp('table_test.R')
source('table_test.R')
source('table_test.R')
source('table_test.R')
source('table_test.R')
source('test_2.R')
source('test_2.R')
source('test_2.R')
getwd()
source('test_2.R')
source('test_2.R')
source('test_2.R')
source('test_2.R')
runApp()
runApp()
library(shiny)
library(shinycssloaders)
hs=data.frame(row.names = c('Homo sapiens'))
hs$code=c('hsa')
hs$db=c("org.Hs.eg.db")
hs=as.matrix(hs)
# UI
ui <- shinyUI(fluidPage(
# Title
titlePanel("inTAD"),
# Sidebar with a slider input for number of bins
sidebarLayout(
sidebarPanel(
p('Prepare 3 input files'),
p('1. H3K27ac ChIP-seq peaks with RPKM normalized signal'),
p('2. H3K27ac ChIP-seq peaks'),
p('3. Gencode RNA-seq log2(RPKM)'),
selectInput("org", "Organism:",
choices=row.names(hs)),
# ChIP-seq signals upload
fileInput('file1', 'H3K27ac ChIP-seq signals file',
accept = c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)
),
# chip-seq bed file
fileInput('file2', 'H3K27ac ChIP-seq bed file',
accept=c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)),
# RNA-seq file
fileInput('file3', 'RNA-seq file',
accept = c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)
),
p('Select correlation cut-off'),
numericInput('corValue', 'Correlation value', 0.6, min=0, max=1, step=0.1),
p('Select p-value cut-off'),
numericInput('pVal', 'P-Value cut-off', 0.05, min = 0, max=1, step=0.01),
actionButton("analysis", "Perform Analysis")
),
# Show some sample results
mainPanel(
# withSpinner(plotOutput("distPlot",height = '700px')),
# p(),
# verbatimTextOutput("pv"),
h4("Top 10 highly correlated and significant Enhancer - gene associations"),
dataTableOutput('tablecorr')
#column(12,withSpinner(dataTableOutput('tablecorr'),proxy.height = '80px')),
#column(12,dataTableOutput('table'))
)
)))
server <- function(input, output){
library(InTAD)
library(rtracklayer)
options(shiny.maxRequestSize = 9*1024^2)
showmax=2000
# receive files
ress=reactive({
# ChIP peaks RPKM file
chipSignal=input$file1
chipSignal.load=read.table(chipSignal$datapath, header=TRUE, row.names="region")
# ChIP bed file
chipBed=input$file2
chipBed.load=import.bed(chipBed$datapath)
# RNA log2(RPKM) file
rnaSignal=input$file3
rnaSignal.load=read.table(rnaSignal$datapath, header = TRUE, row.names = "Gene")
#make sure rownames are same as GR object (0 or 1 based index)
rownames(chipSignal.load) <- as.character(chipBed.load)
# load Gencode annotations from github repo - only transcripts
gencode.txs=readRDS("gencode.transcript.v19.rds")
inTADSig=newSigInTAD(chipSignal.load, chipBed.load, rnaSignal.load, gencode.txs)
inTADSig=filterGeneExpr(inTADSig, geneType = "protein_coding")
inTADSig <- combineInTAD(inTADSig, tadGR)
corData<-findCorrelation(inTADSig)
output$tablecorr=renderDataTable({head(corData)})
})
# output$tablecorr=renderDataTable({
#   corData
#   })
}
# Run shiny app
shinyApp(ui = ui, server = server)
runApp()
server=function(input,output){}
library(shiny)
library(shinycssloaders)
# user interface
ui=fluidPage(
sidebarLayout(
sidebarPanel(
p('Prepare 3 input files:'),
p('1. H3K27ac ChIP-seq signal RPKM'),
p('2. H3K27ac CHIP-seq peaks in bed'),
p('3. RNA-seq Gencode log2(RPKM)'),
# 1. ChIp-seq singal RPKM
fileInput('file1', 'ChIP-seq RPKM signal file',
accept = c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)),
# 2. ChiP-seq bed
fileInput('file2', 'ChIP-seq peaks in bed format',
accept = c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)),
fileInput('file3', 'RNA-seq Gencode log2(RPKM)',
accept = c(
'text/csv',
'text/comma-separated-values',
'text/tab-separated-values',
'text/plain',
'.csv',
'.tsv'
)),
mainPanel(
h3('ChIP-seq signal data'),
dataTableOutput('chipSignal'),
h3('RNA-seq signal data'),
dataTableOutput('rnaSignal')
)
)
)
)
#### server script
server=function(input,output){}
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
runApp('app2.R')
